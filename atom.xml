<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Mindspop's Blog]]></title>
  <subtitle><![CDATA[a blog recording something in mind]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="mindspop.github.io/"/>
  <updated>2015-04-12T14:30:35.000Z</updated>
  <id>mindspop.github.io/</id>
  
  <author>
    <name><![CDATA[Mindspop]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JavaScript Style Guide]]></title>
    <link href="mindspop.github.io/2015/04/12/javascript-style-guide/"/>
    <id>mindspop.github.io/2015/04/12/javascript-style-guide/</id>
    <published>2015-04-11T16:00:00.000Z</published>
    <updated>2015-04-12T14:30:35.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前提说明：<br>本文通过对比一些主流 JavaScript Style Guide, 摘录了一些值得借鉴的语法书写方式，以提高程序执行性能。而格式问题「Formatting: space, newline, etc」暂且被忽略了，因为一般可以通过 IDE 编辑器设置处理，写的时候可以按照自己的习惯来，通过编辑器格式配置方式以保持和团队风格统一，常见格式建议可查看<a href="#reference">参考资料</a>。</p>
</blockquote>
<a id="more"></a>
<h2 id="变量声明「Variable_Declaration」">变量声明「Variable Declaration」</h2><h3 id="Object">Object</h3><ul>
<li><p>使用 Literal declaration</p>
<pre><code><span class="variable"><span class="keyword">var</span> item</span> = {};
</code></pre></li>
<li><p>使用同义词替换保留字</p>
<pre><code><span class="comment">// bad</span>
<span class="keyword">var</span> superman = {
  <span class="class"><span class="keyword">class</span>:</span> <span class="symbol">'alie</span>n'
};

<span class="comment">// bad</span>
<span class="keyword">var</span> superman = {
  klass: <span class="symbol">'alie</span>n'
};

<span class="comment">// good</span>
<span class="keyword">var</span> superman = {
  <span class="class"><span class="keyword">type</span>:</span> <span class="symbol">'alie</span>n'
};
</code></pre></li>
</ul>
<h3 id="Array">Array</h3><pre><code><span class="variable"><span class="keyword">var</span> items</span> = [];
</code></pre><h3 id="Function">Function</h3><ul>
<li><p>如果在<code>non-function block</code>(if, while, etc)，声明一个函数，需要把函数赋值给一个变量。「ECMA-262 中定义<code>a list of statements</code>为<code>a block</code>」</p>
<pre><code><span class="comment">// bad</span>
<span class="keyword">if</span> (currentUser) {
    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);
    }
}

<span class="comment">// good</span>
<span class="keyword">var</span> test;
<span class="keyword">if</span> (currentUser) {
  test = <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);
  };
}
</code></pre></li>
<li>函数参数中不要使用<code>arguments</code>保留字「因为会覆盖 function scope 中的 arguments」</li>
</ul>
<h3 id="关于声明提升「Hoisting」">关于声明提升「Hoisting」</h3><ul>
<li>变量声明会被提前，但是赋值不会</li>
<li><p>函数声明时，函数名和函数体都会被提前</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">example</span><span class="params">()</span> </span>{

    <span class="comment">// =&gt; Flying</span>
      superPower(); 

      <span class="function"><span class="keyword">function</span> <span class="title">superPower</span><span class="params">()</span> </span>{
        <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);
      }
}
</code></pre></li>
</ul>
<h2 id="类型检查「Type_Checking_」">类型检查「Type Checking 」</h2><h3 id="实际类型检测「Actual_Types_Checking」">实际类型检测「Actual Types Checking」</h3><h4 id="Types:_String、Number、Boolean、Object_类型检查">Types: String、Number、Boolean、Object 类型检查</h4><pre><code><span class="comment">// 其实 typeof 返回值一定是一个字符串，这里没必要使用 ===，即使用 == 即可</span>
<span class="keyword">typeof</span> variable == <span class="string">"Types"</span>
</code></pre><h4 id="Array-1">Array</h4><pre><code>Array.<span class="function"><span class="title">isArray</span><span class="params">(arrayLikeObject)</span></span>
</code></pre><h4 id="Node">Node</h4><pre><code><span class="comment">// nodeType 返回值一定是 number，这里没必要使用 ===，即使用 == 即可</span>
elem<span class="class">.nodeType</span> == <span class="number">1</span>
</code></pre><h4 id="null">null</h4><pre><code><span class="regexp">//</span> 注意：<span class="keyword">typeof</span> <span class="literal">null</span> 返回的是 “object”
variable === <span class="literal">null</span>
</code></pre><h4 id="undefined">undefined</h4><pre><code><span class="comment">// 1. Global Variable</span>
<span class="comment">// 这里 typeof 返回值也肯定是字符串，所以用 == 即可</span>
<span class="keyword">typeof</span> variable == <span class="string">"undefined"</span>

<span class="comment">// 2. Local Variable</span>
variable === <span class="literal">undefined</span>
</code></pre><h4 id="null_or_undefined">null or undefined</h4><pre><code><span class="comment">// undefined 值可能被重写</span>
<span class="built_in">variable</span> <span class="subst">==</span> <span class="built_in">null</span>
</code></pre><h3 id="类型强制转换「Coerced_Types」">类型强制转换「Coerced Types」</h3><blockquote>
<p>类型转换部分语法原理，可参考这篇文章：<a href="https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">Truth, Equality and JavaScript</a></p>
</blockquote>
<pre><code><span class="keyword">var</span> number = <span class="number">1</span>,
 <span class="keyword">string</span> = <span class="string">"1"</span>,
 <span class="keyword">bool</span> = <span class="keyword">false</span>;

 <span class="comment">// "1"</span>
 number + <span class="string">""</span>;

 <span class="comment">// 1</span>
 +<span class="keyword">string</span>;    

 <span class="comment">// 0</span>
 +<span class="keyword">bool</span>; 

 <span class="comment">// "false"</span>
 <span class="keyword">bool</span> + <span class="string">""</span>;

 <span class="comment">// "false"     </span>
 !<span class="keyword">string</span>;

 <span class="comment">// "true"</span>
 !!number;
</code></pre><h2 id="条件判断「Conditional_Evaluation」">条件判断「Conditional Evaluation」</h2><h3 id="Booleans,_Truthies_&amp;_Falsies_判断">Booleans, Truthies &amp; Falsies 判断</h3><pre><code><span class="comment">// Booleans:</span>
<span class="literal">true</span>, <span class="literal">false</span>

<span class="comment">// Truthy:</span>
<span class="string">"foo"</span>, <span class="number">1</span>, <span class="built_in">Object</span>

<span class="comment">// Falsy:</span>
<span class="string">""</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="keyword">void</span> <span class="number">0</span>
</code></pre><h3 id="判断数组是否为空">判断数组是否为空</h3><pre><code><span class="comment">// 当数组不为空时</span>
<span class="keyword">if</span> (<span class="built_in">array</span><span class="built_in">.</span>length) <span class="attribute">...</span>

<span class="comment">// 当数组为空时</span>
<span class="keyword">if</span> (<span class="subst">!</span><span class="built_in">array</span><span class="built_in">.</span>length) <span class="attribute">...</span>
</code></pre><h3 id="判断字符串是否为空">判断字符串是否为空</h3><pre><code><span class="comment">// 当字符串不为空时</span>
<span class="keyword">if</span> (<span class="built_in">string</span>) <span class="attribute">...</span>

<span class="comment">// 当字符串为空时</span>
<span class="keyword">if</span> (<span class="subst">!</span><span class="built_in">string</span>) <span class="attribute">...</span>
</code></pre><h3 id="判断引用是否为空「evaluating_a_reference」">判断引用是否为空「evaluating a reference」</h3><pre><code><span class="regexp">//</span> 当引用不为空时
<span class="keyword">if</span> (foo) ...

<span class="regexp">//</span> 当引用为空时
<span class="keyword">if</span> (!foo) ...

<span class="regexp">//</span> 除去匹配: <span class="number">0</span>, <span class="string">""</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, NaN 情况，只匹配 boolean <span class="literal">false</span>
<span class="keyword">if</span> (foo === <span class="literal">false</span>) ...

<span class="regexp">//</span> 只匹配 <span class="literal">null</span> <span class="keyword">or</span> <span class="literal">undefined</span>, 因为 <span class="literal">null</span> == <span class="literal">undefined</span>
<span class="keyword">if</span> (foo == <span class="literal">null</span>) ...
</code></pre><h3 id="判断数组中是否存在某元素">判断数组中是否存在某元素</h3><pre><code>array.<span class="function"><span class="title">indexOf</span><span class="params">( <span class="string">"a"</span> )</span></span> &gt;= <span class="number">0</span>
</code></pre><h2 id="常见操作优化">常见操作优化</h2><h3 id="Array_操作">Array 操作</h3><ul>
<li>使用 Array.push 而不是直接赋值</li>
<li>使用 Array.slice 拷贝数组</li>
<li>使用 Array.prototype.slice.call(arrayLikeObject) 将 array-like 对象转换为数组</li>
</ul>
<h3 id="String_操作">String 操作</h3><ul>
<li>使用 Array.join 拼接字符串</li>
<li><p>处理长字符串跨行时，用 “+” 拼接字符串</p>
<pre><code>// bad
var errorMessage = 'This is a super long error that was thrown because of Batman. When you <span class="operator"><span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere <span class="keyword">fast</span>.<span class="string">';

// bad
var errorMessage = '</span>This <span class="keyword">is</span> a super long error that was thrown because \
<span class="keyword">of</span> Batman. <span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> \
<span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere \
<span class="keyword">fast</span>.<span class="string">';

// good
var errorMessage = '</span>This <span class="keyword">is</span> a super long error that was thrown because <span class="string">' +
  '</span><span class="keyword">of</span> Batman. <span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="string">' +
  '</span><span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere <span class="keyword">fast</span>.<span class="string">';</span></span>
</code></pre></li>
</ul>
<h3 id="Object_操作">Object 操作</h3><ul>
<li>使用<code>.</code>读取字符串属性</li>
<li>使用<code>[]</code>读取变量数量</li>
</ul>
<p><a href="id:reference" target="_blank" rel="external">参考资料</a>：</p>
<ol>
<li><a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="external">Principles of Writing Consistent, Idiomatic JavaScript</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb JavaScript Style Guide</a></li>
<li><a href="https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">Truth, Equality and JavaScript</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前提说明：<br>本文通过对比一些主流 JavaScript Style Guide, 摘录了一些值得借鉴的语法书写方式，以提高程序执行性能。而格式问题「Formatting: space, newline, etc」暂且被忽略了，因为一般可以通过 IDE 编辑器设置处理，写的时候可以按照自己的习惯来，通过编辑器格式配置方式以保持和团队风格统一，常见格式建议可查看<a href="#reference">参考资料</a>。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="mindspop.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript Tech" scheme="mindspop.github.io/categories/JavaScript-Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[元素在 Z 轴方向上的堆叠顺序规则分析]]></title>
    <link href="mindspop.github.io/2014/08/30/stacking-context-analysis-of-element-in-z-axis/"/>
    <id>mindspop.github.io/2014/08/30/stacking-context-analysis-of-element-in-z-axis/</id>
    <published>2014-08-29T16:00:00.000Z</published>
    <updated>2015-04-11T16:56:41.000Z</updated>
    <content type="html"><![CDATA[<p>在正式开始介绍前，我们先提出这样一个疑问：</p>
<blockquote>
<p>当两个元素位置互相堆叠在一起时，CSS 样式是如何决定哪个元素显示在前，哪个元素显示在后的呢？</p>
</blockquote>
<p>为了解决这个问题，在左右、上下的布局基础上，CSS 2.1 引入了第三维度<code>Z 轴</code>的概念。CSS 将所有元素都被纳入一个<code>Stacking Context</code>中，根据某种规则控制元素堆叠的优先顺序，下面主要详细介绍一下这种规则。</p>
<h2 id="Stacking_Context_介绍">Stacking Context 介绍</h2><p>CSS 2.1 Spec 对<code>Stacking Context</code>的描述：</p>
<blockquote>
<p>The order in which the rendering tree is painted onto the canvas is described in terms of stacking contexts.</p>
</blockquote>
<p>我对这句话的理解是：<code>Stacking Context</code>有着一套规范元素堆叠顺序的规则。在渲染页面时，根据这套顺序规则依次在 Z 轴上显示不同元素。</p>
<h3 id="Stacking_Context_的特性">Stacking Context 的特性</h3><ul>
<li>每个文档布局中存在多个 <code>Stacking Context</code>。而产生一个新的 <code>Stacking Context</code> 是有条件的「详见下文」</li>
<li>在每个<code>Stacking Context</code>中可以嵌套其它的<code>Stacking Context</code></li>
<li>每个<code>Stacking Context</code>中的元素位置和同级的<code>Stacking Context</code>中元素位置的顺序是互相独立的</li>
<li>每个<code>Stacking Context</code>是自包含的，即当父元素形成一个<code>Stacking Context</code>「此时作为后代元素的<code>Parent Stacking Context</code>」，所有内部后代元素的堆叠顺序都仅限在<code>Parent Stacking Context</code>比较<a id="more"></a>
<h3 id="Stacking_Context_内部元素排列顺序规则">Stacking Context 内部元素排列顺序规则</h3>按抵部-&gt;顶部顺序，可以抽象成七层布局：</li>
</ul>
<img src="/2014/08/30/stacking-context-analysis-of-element-in-z-axis/stacking-context-order.png">
<h3 id="归属于不同_Stacking_Context_的元素顺序比较">归属于不同 Stacking Context 的元素顺序比较</h3><p>上面介绍的堆叠顺序规则只用于比较同属于一个<code>Parent Stacking Context</code>的元素堆叠顺序。如果两个元素属于两个不同的<code>Parent Stacking Context</code>，那么它俩的顺序是由<code>Parent Stacking Context</code>的顺序决定的。</p>
<p>这句话说的有点绕，我们用图例来解释：</p>
<img src="/2014/08/30/stacking-context-analysis-of-element-in-z-axis/parent-stacking-context.png">
<p>从图例中可以看到，<code>DIV #2.1</code>元素位置在<code>DIV #1.1</code>和<code>DIV #1.2</code>之下，尽管它的<code>z-index</code>值为 100。产生这个现象的原因就是因为<code>DIV #2.1</code>和<code>DIV #1.1</code>不在同一个<code>Parent Stacking Context</code>。所以此时需要找到<code>DIV #2.1</code>的<code>Parent Stacking Context</code>，即为<code>DIV #2</code>，此时比较<code>DIV #2</code>和<code>DIV #1.1</code>的堆叠顺序，因为<code>DIV #2</code>的<code>z-index</code>值为 1，所以它在<code>DIV #1.1</code>元素的下方，同时<code>DIV #2.1</code>的位置顺序受限于<code>DIV #2</code>，最后的排布顺序就如图所示。</p>
<blockquote>
<p><strong>图例解释说明：</strong></p>
<ul>
<li>DIV #n，#n.n，#n.n.n 表示互为父-子元素关系，具体<code>HTML</code>结构层次：</li>
</ul>
<blockquote>
<ul>
<li>Body<ul>
<li>DIV #1<ul>
<li>DIV #1.1<ul>
<li>DIV #1.2</li>
</ul>
</li>
</ul>
</li>
<li>DIV #2<pre><code>* <span class="keyword">DIV</span> <span class="string">#2</span>.<span class="number">1</span>
  * <span class="keyword">DIV</span> <span class="string">#2</span>.<span class="number">1.1</span>
   * <span class="keyword">DIV</span> <span class="string">#2</span>.<span class="number">1.2</span>
</code></pre></li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>绿色背景表示根元素「即<code>&lt;html&gt;</code>」产生的<code>Stacking Context</code></li>
<li>颜色相同的元素表示它们同属于一个<code>Parent Stacking Context</code>，<code>Stacking Context</code>层次关系：</li>
</ul>
<blockquote>
<ul>
<li>Root<ul>
<li>DIV #1</li>
<li>DIV #1.1</li>
<li>DIV #1.2 </li>
<li>DIV #2<ul>
<li>DIV #2.1<ul>
<li>DIV 2.1.1</li>
<li>DIV 2.1.2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<p>既然元素处于哪个<code>Parent Stacking Context</code>也会影响元素显示顺序，那么我们来看看元素的<code>Parent Stacking Context</code>是如何产生的：</p>
<blockquote>
<p>最外层的<code>Stacking Context</code>是根元素产生的，那么我们可以理解为它是所有元素的<code>Parent Stacking Context</code>。但当有新的<code>Stacking Context</code>产生时，这个新<code>Stacking Context</code>就是所有后代元素的<code>Parent Stacking Context</code>。以此类推，每当父元素产生一个新<code>Stacking Context</code>，就给后代元素提供了一个<code>Parent Stacking Context</code>。</p>
</blockquote>
<h3 id="产生新_Stacking_Context_的条件">产生新 Stacking Context 的条件</h3><ul>
<li><code>Root element</code>「可以理解为第一个<code>Stacking Context</code>，用来包含其它的<code>Stacking Context</code>」</li>
<li><code>Positioned</code>元素的<code>z-index</code>值不是<code>auto</code></li>
<li>元素的<code>Opacity</code>值小于 1「可以看作是给普通元素增加了<code>Position</code>属性，且<code>z-index</code>值为 0「详细可见 <a href="http://www.w3.org/TR/css3-color/#transparency" target="_blank" rel="external">CSS Spec 2.1</a>」</li>
<li>Chrome 22+ 和 Mobile WebKit,<code>z-index</code>值为<code>auto</code>的<code>fixed position</code>元素</li>
</ul>
<h2 id="Positioned_元素堆叠顺序规则">Positioned 元素堆叠顺序规则</h2><p>上面介绍了每一个<code>Stacking Context</code>内部元素的堆叠顺序，这里进一步详细介绍<code>Positioned</code>元素的堆叠顺序。</p>
<h3 id="z-index_的作用">z-index 的作用</h3><p><code>Positioned</code>元素的堆叠顺序是由<code>z-index</code>决定的。<code>z-index</code>有2个作用：</p>
<ol>
<li>决定<code>Positioned</code>元素的<code>Stack Level</code>「可以理解为堆叠优先级，<code>Stack Level</code>值为整数，值大的放在上层」</li>
<li>决定是否形成一个新的<code>Stacking Context</code></li>
</ol>
<h3 id="z-index_属性值">z-index 属性值</h3><p><code>z-index</code> 有两个属性值：<code>&lt;integer&gt;</code>和<code>&lt;auto&gt;</code>「注：只有<code>Positioned</code>元素的<code>Z-index</code>值才有效」。</p>
<ul>
<li><code>&lt;integer&gt;</code>：当<code>Z-index</code>设置了一个整数「负整数，零，正整数」时，<code>Positioned</code>元素就产生了一个新的<code>Stacking Context</code>，同时这个整数代表了当前元素的<code>Stack Level</code></li>
<li><code>&lt;auto&gt;</code>：该值说明当前元素的<code>Stack Level</code>值为 0。但此时并没有产生新的<code>Stacking Context</code>，除非这个元素是个根元素「注：这里可以看出<code>z-index = auto</code>和<code>z-index = 0</code>的区别」</li>
</ul>
<h2 id="总结">总结</h2><ol>
<li>任意一个元素都归属一个<code>Stacking Context</code>，<code>Stacking Context</code>可以互相嵌套，从而形成一个<code>Stacking Context</code>层级体系。「<code>Root element</code>是一个初始的<code>Stacking Context</code>，它包裹了其它的<code>Stacking Context</code>」</li>
<li>在每一个<code>Stacking Context</code>内部，有特定堆叠优先级规则决定不同类型元素的堆叠顺序「<code>Positioned</code>元素的堆叠顺序由<code>z-index</code>值决定」</li>
<li>当两个元素归属于不同的<code>Parent Stacking Context</code>时，它们的堆叠顺序互不干扰</li>
</ol>
<h3 id="参考资料">参考资料</h3><ol>
<li><a href="http://www.w3.org/TR/CSS21/zindex.html" target="_blank" rel="external">http://www.w3.org/TR/CSS21/zindex.html</a></li>
<li><a href="http://www.w3.org/TR/CSS21/visuren.html#layers" target="_blank" rel="external">http://www.w3.org/TR/CSS21/visuren.html#layers</a></li>
<li><a href="http://www.w3.org/TR/css3-color/#transparency" target="_blank" rel="external">http://www.w3.org/TR/css3-color/#transparency</a></li>
<li><a href="http://segmentfault.com/a/1190000000460664" target="_blank" rel="external">http://segmentfault.com/a/1190000000460664</a></li>
<li><a href="http://gbspacing.com/z-index.gb" target="_blank" rel="external">http://gbspacing.com/z-index.gb</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在正式开始介绍前，我们先提出这样一个疑问：</p>
<blockquote>
<p>当两个元素位置互相堆叠在一起时，CSS 样式是如何决定哪个元素显示在前，哪个元素显示在后的呢？</p>
</blockquote>
<p>为了解决这个问题，在左右、上下的布局基础上，CSS 2.1 引入了第三维度<code>Z 轴</code>的概念。CSS 将所有元素都被纳入一个<code>Stacking Context</code>中，根据某种规则控制元素堆叠的优先顺序，下面主要详细介绍一下这种规则。</p>
<h2 id="Stacking_Context_介绍">Stacking Context 介绍</h2><p>CSS 2.1 Spec 对<code>Stacking Context</code>的描述：</p>
<blockquote>
<p>The order in which the rendering tree is painted onto the canvas is described in terms of stacking contexts.</p>
</blockquote>
<p>我对这句话的理解是：<code>Stacking Context</code>有着一套规范元素堆叠顺序的规则。在渲染页面时，根据这套顺序规则依次在 Z 轴上显示不同元素。</p>
<h3 id="Stacking_Context_的特性">Stacking Context 的特性</h3><ul>
<li>每个文档布局中存在多个 <code>Stacking Context</code>。而产生一个新的 <code>Stacking Context</code> 是有条件的「详见下文」</li>
<li>在每个<code>Stacking Context</code>中可以嵌套其它的<code>Stacking Context</code></li>
<li>每个<code>Stacking Context</code>中的元素位置和同级的<code>Stacking Context</code>中元素位置的顺序是互相独立的</li>
<li>每个<code>Stacking Context</code>是自包含的，即当父元素形成一个<code>Stacking Context</code>「此时作为后代元素的<code>Parent Stacking Context</code>」，所有内部后代元素的堆叠顺序都仅限在<code>Parent Stacking Context</code>比较]]>
    
    </summary>
    
      <category term="css" scheme="mindspop.github.io/tags/css/"/>
    
      <category term="CSS Tech" scheme="mindspop.github.io/categories/CSS-Tech/"/>
    
  </entry>
  
</feed>